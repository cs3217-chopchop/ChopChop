import Foundation

/**
 Represents a user of chopchop!
 
 Representation Invariants:
 - Name is not empty.
 */
struct User: Identifiable, CachableEntity {
    // MARK: Specification Fields
    /// Identifies the firebase document that contains this user.
    /// This id is autogenerated by firebase when the user is first added to firebase when creating account.
    let id: String
    /// The name of user. Cannot be empty.
    let name: String
    /// The id of other users that a user is following.
    let followees: [String]
    /// The recipe ratings  that have been given by the user.
    let ratings: [UserRating]
    /// The time when the user is added to firebase (i.e. account is created).
    let createdAt: Date
    /// The time when the user is updated in firebase.
    let updatedAt: Date

    /**
     Instantiates a user with the given parameters.
     - Throws:
        - `UserError.emptyName` if the given name trimmed is empty.
     */
    init(id: String, name: String, followees: [String], ratings: [UserRating], createdAt: Date,
         updatedAt: Date) throws {
        self.id = id
        let trimmedName = name.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !trimmedName.isEmpty else {
            throw UserError.emptyName
        }
        self.name = trimmedName

        self.followees = followees
        self.ratings = ratings
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

}

// MARK: Firebase-dependent initialization
extension User {
    /**
     Instantiates a user from the firebase storage models, UserRecord and UserInfoRecord.
     Return `nil` if UserRecord id, UserInfoRecord time of creation and UserInfoRecord last updated time
     are missing.
     */
    init?(from record: UserRecord, infoRecord: UserInfoRecord) {
        guard let id = record.id, let createdAt = infoRecord.createdAt, let updatedAt = infoRecord.updatedAt else {
            return nil
        }

        self.id = id
        self.name = record.name
        self.followees = record.followees
        self.ratings = record.ratings
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
}

/**
 Represents the possible errors thrown when initializing a user.
 */
enum UserError: Error {
    case emptyName
}
